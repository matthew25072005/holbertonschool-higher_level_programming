The ``my_list`` module

Using ``my_list``

First, import ``my_list`` from the ``1-my_list`` file:

    >>> my_list_module = __import__('1-my_list')
    >>> MyList = my_list_module.MyList

Examples:
---------
Add elements to the list and print sorted:

    >>> my_list_instance = MyList([1, 4, 2, 3, 5])
    >>> my_list_instance.print_sorted()
    [1, 2, 3, 4, 5]

Add a list of strings and print sorted:

    >>> my_empty_list = MyList(['c', 'e', 'd', 't', 'a'])
    >>> my_empty_list.print_sorted()
    ['a', 'c', 'd', 'e', 't']

Check if `print_sorted()` prints a new sorted list:

    >>> my_list_instance = MyList([3, 1, 4, 2])
    >>> my_list_instance.print_sorted()
    [1, 2, 3, 4]

    >>> my_list_instance
    [3, 1, 4, 2]

Check `__str__` method (string representation of the list):

    >>> print(my_list_instance)
    [3, 1, 4, 2]

Check `append()` method

    >>> my_list_instance.append(5)
    >>> my_list_instance
    [3, 1, 4, 2, 5]

    >>> my_list_instance.print_sorted()
    [1, 2, 3, 4, 5]

Test for Type errors:
---------------------

Miss required arguments (Correct Usage):

    >>> my_empty_list = MyList()
    >>> my_empty_list.print_sorted()
    []

Add two arguments (Incorrect Usage):

    >>> my_list_instance.print_sorted("extra_argument")
    Traceback (most recent call last):
    ...
    TypeError: print_sorted() takes 1 positional argument but 2 were given